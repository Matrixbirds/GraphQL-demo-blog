interface Node {
    id: ID!
}

scalar DateScalarType

interface CommentInterface implements Node {
    title: String
    content: String
}

type MyselfCommentType implements CommentInterface {
    title: String
    content: String
    created_at: DateScalarType
    updated_at: DateScalarType
}

type RepliedCommentType implements CommentInterface {
    title: String
    content: String
    created_at: DateScalarType
    updated_at: DateScalarType
    author: UserType
}

type UserType implements Node {
    id: id
    name: name
}

type CommentType implements CommentInterface {
    title: String
    content: String
    created_at: DateScalarType
    updated_at: DateScalarType
    author: UserType
}

type MyCommentsType {
    myself: MyselfCommentType
    replied: RepliedCommentType
}

interface UserProfileInterface {
    name: String
    both: DateScalarType
    country: CountryScalarType
}

type UserProfileType implements UserProfileInterface {
    name: String
    both: DateScalarType
    country: CountryScalarType
    created_at: DateScalarType
    updated_at: DateScalarType
}

input UserProfileInput implements UserProfileType {
    name: String!
    both: DateScalarType!
    country: CountryScalarType!
}

input PasswordInput {
    old_password: String!
    newpassword: String!
}

type ArticleType implements Node {
    title: String
    content: String
    author: UserType
    comments: CommentsType
}

type PaginationType {
    total_page: Int
    total_count: Int
    current_page: Int
    current_count: Int
}

interface PaginationInterface {
    data: List
    meta: PaginationType
}

type ArticlesType implements PaginationInterface {
    data: List(ArticleType)
    meta: PaginationType
}

type CommentsType implements PaginationInterface {
    data: List(CommentType)
    meta: PaginationType
}

type userAuthInput {
    name: GraphQLString!
    password: GraphQLString!
}

type meType {
    profile: UserProfileType
    articles(page: Int! per: Int!): ArticlesType
    article(id: ID!) ArticleType
    comments: MyCommentsType
    changePassword: PasswordInput
}

type latestType {
    articles(page: Int! per: Int!): ArticlesType
    article(id: ID!) ArticleType
}

type ArticleInput {
    id: ID
    title: String!
    content: String!
}

mutation {
    signUp(input: userAuthInput!): signUpMutation
    signIn(input: userAuthInput!): signInMutation
    createArticle(input: ArticleInput!): createArticleMutation
    editArticle(input: ArticleInput!): editArticleMutation
    removeArticle(input: ArticleInput!): removeArticleMutation
    replyArticle(id: ID!): replyArticleMutation
    replyComment(id: ID!): replyCommentMutation
    removeComment(id: ID!): removeCommentMutation
}

query {
    latest: latestType
    authToken: TokenType
    me: meType
}
