#!/usr/bin/env node
if (require.main === module) {

    const USAGE = 'GraphQL Code Snippets Generator\n\n Usage: <operation> <resource_name> [options]\n\n';
    const EXAMPLE = 'E.g.:  ./bin/graphql type <name> -attrs id:GraphQLInt title:GraphQLString';
    const yargs = require('yargs');
    const argv = yargs
        .usage(USAGE)
        .help('help').alias('help', 'h')
        .version('0.0.1', 'version').alias('version', 'V')
        .command('type', 'generate type')
        .command('mutation', 'generate mutation')
        .example(EXAMPLE)
        .options({
            attributes: {
                array: true,
                alias: 'attrs',
                description: '<field1:type1> <field2:type2> ... - graphql Attributes',
            },
            mutations: {
                array: true,
                alias: 'm',
                description: '<mutation> ... - graphql Mutations',
            }
        })
        .argv;

     const CodeSnippets = {};

    // read code snippets
    const fs = require('fs');
    const ejs = require('ejs');
    const path = require('path');
    const CodeSnippetsPath = path.join(__dirname, './code_snippets');
    fs
        .readdirSync(CodeSnippetsPath)
        .filter(file => (file.indexOf('.') !== 0) && (file.slice(-4) === '.ejs'))
        .forEach(file => {
            const _file = fs.readFileSync(`${CodeSnippetsPath}/${file}`, 'utf8');
            CodeSnippets[path.basename(file).split('.ejs')[0]] = _file;
        });

    function generateFile(type, {filename, options}) {
        const src = CodeSnippets[type];
        if (type === 'type') {
            options.mutations = options.mutation_name = undefined;
        }
        const data = ejs.render(src,options);
        fs.writeFileSync(filename, data, { encoding: 'utf8', flag: 'w' });
        return filename;
    }

    function filterFalsy(arr) {
        const {isFalsy} = require('../utils');
        return arr.filter(ele => (isFalsy(ele) ? '' : ele))
    }

    function parseAttrs(...argv) {
        const attrs = {};
        for (const e of filterFalsy(argv)) {
            let [k, v] = e.split(':');
            attrs[k] = v;
        }
        return Object.entries(attrs);
    }

    const resourcePath = (resource, name) => {
        const _path = path.join(__dirname, `../be/graphql/${resource}s`);
        return `${_path}/${name.toLowerCase()}.${resource}.js`;
    }

//    console.log(CodeSnippets);
    if (argv._.length < 0) {
        yargs.showHelp();
    }

    const {camelCase, isFalsy, isEmpty} = require('../utils');

    const resourceHandler = (resource, args) => generateFile(resource, args);

    const executeGenerateResource = (resource, options) => resourceHandler(resource, options);

    const CommandHandler = ({ _, attributes, mutations }) => {
        let [cmd, name] = _;
        name = camelCase(name);
        if (isFalsy(mutations) || isEmpty(mutations)) mutations = ['create', 'update', 'destroy'];
        const attrs = parseAttrs(attributes);
        if (!cmd || !['type', 'mutation'].includes(cmd)) throw Error(`Command ${cmd} may not exists`);
        if (!name) throw Error(`Name must be present`);
        if (!attrs.length > 0) throw Error(`attrs must be present`);
        const generateOptions = {
            name: name,
            type_name: `${name}Type`,
            mutation_name: `${name}Mutation`,
            fields_table: attrs,
            mutations: mutations
        };
        const options = {
            filename: resourcePath(cmd, name),
            options: generateOptions
        };
        const file = executeGenerateResource(cmd, options);
        if (!file) throw Error(`Command: ${cmd} not Found`);
        console.log(`generate types file at ${file}`);
    }

    try {
        CommandHandler(argv);
    } catch(err) {
        console.log(err);
    }
}
